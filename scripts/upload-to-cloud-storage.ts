#!/usr/bin/env ts-node
/**
 * Upload Split CSV Files to Google Cloud Storage
 *
 * This script uploads the split CSV files (generated by split-csv.ts) to Google Cloud Storage
 * with proper caching headers and CDN configuration.
 *
 * Prerequisites:
 * 1. Run `npm run split-csv` to generate split files first
 * 2. Install gcloud CLI and authenticate: `gcloud auth login`
 * 3. Set project: `gcloud config set project YOUR_PROJECT_ID`
 *
 * Usage:
 *   npm run upload-csv              # Upload to default bucket
 *   npm run upload-csv -- --bucket=my-bucket  # Upload to specific bucket
 *   npm run upload-csv -- --dry-run  # Preview what would be uploaded
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

interface UploadOptions {
  bucketName: string;
  dryRun: boolean;
  skipBucketCreation: boolean;
  enableCdn: boolean;
  cacheControl: string;
  makePublic: boolean;
  region: string;
}

interface UploadStats {
  zhviFiles: number;
  zoriFiles: number;
  totalSize: number;
  duration: number;
  errors: string[];
}

/**
 * Parse command line arguments
 */
const parseArgs = (): Partial<UploadOptions> => {
  const args = process.argv.slice(2);
  const options: Partial<UploadOptions> = {};

  for (const arg of args) {
    if (arg === '--dry-run') {
      options.dryRun = true;
    } else if (arg === '--skip-bucket-creation') {
      options.skipBucketCreation = true;
    } else if (arg === '--no-cdn') {
      options.enableCdn = false;
    } else if (arg === '--private') {
      options.makePublic = false;
    } else if (arg.startsWith('--bucket=')) {
      options.bucketName = arg.split('=')[1];
    } else if (arg.startsWith('--region=')) {
      options.region = arg.split('=')[1];
    } else if (arg.startsWith('--cache-control=')) {
      options.cacheControl = arg.split('=')[1];
    }
  }

  return options;
};

/**
 * Execute shell command and return output
 */
const exec = (command: string, silent: boolean = false): string => {
  try {
    const output = execSync(command, {
      encoding: 'utf-8',
      stdio: silent ? 'pipe' : 'inherit'
    });
    return output;
  } catch (error) {
    const err = error as Error & { stdout?: string; stderr?: string };
    console.error(`Command failed: ${command}`);
    console.error(err.stderr || err.message);
    throw error;
  }
};

/**
 * Check if gcloud CLI is installed and authenticated
 */
const checkGcloudSetup = (): void => {
  console.log('üîç Checking gcloud setup...\n');

  try {
    // Check if gcloud is installed
    exec('gcloud --version', true);
    console.log('‚úÖ gcloud CLI is installed');

    // Check authentication
    const account = exec('gcloud auth list --filter=status:ACTIVE --format="value(account)"', true).trim();
    if (!account) {
      throw new Error('Not authenticated');
    }
    console.log(`‚úÖ Authenticated as: ${account}`);

    // Check project
    const project = exec('gcloud config get-value project', true).trim();
    if (!project || project === '(unset)') {
      throw new Error('No project set');
    }
    console.log(`‚úÖ Project: ${project}\n`);
  } catch (error) {
    console.error('\n‚ùå gcloud setup incomplete. Please run:');
    console.error('   gcloud auth login');
    console.error('   gcloud config set project YOUR_PROJECT_ID\n');
    process.exit(1);
  }
};

/**
 * Check if split CSV files exist
 */
const checkSplitFiles = (baseDir: string): { zhviCount: number; zoriCount: number } => {
  console.log('üîç Checking split CSV files...\n');

  const zhviDir = path.join(baseDir, 'zhvi');
  const zoriDir = path.join(baseDir, 'zori');

  if (!fs.existsSync(zhviDir)) {
    console.error(`‚ùå ZHVI directory not found: ${zhviDir}`);
    console.error('   Run: npm run split-csv\n');
    process.exit(1);
  }

  if (!fs.existsSync(zoriDir)) {
    console.error(`‚ùå ZORI directory not found: ${zoriDir}`);
    console.error('   Run: npm run split-csv\n');
    process.exit(1);
  }

  const zhviFiles = fs.readdirSync(zhviDir).filter(f => f.endsWith('.csv'));
  const zoriFiles = fs.readdirSync(zoriDir).filter(f => f.endsWith('.csv'));

  console.log(`‚úÖ Found ${zhviFiles.length} ZHVI files`);
  console.log(`‚úÖ Found ${zoriFiles.length} ZORI files\n`);

  return { zhviCount: zhviFiles.length, zoriCount: zoriFiles.length };
};

/**
 * Create Cloud Storage bucket if it doesn't exist
 */
const createBucket = (bucketName: string, region: string, dryRun: boolean): void => {
  console.log(`üì¶ Checking bucket: gs://${bucketName}\n`);

  if (dryRun) {
    console.log(`[DRY RUN] Would check/create bucket: gs://${bucketName}\n`);
    return;
  }

  try {
    // Check if bucket exists
    exec(`gcloud storage buckets describe gs://${bucketName}`, true);
    console.log(`‚úÖ Bucket exists: gs://${bucketName}\n`);
  } catch (error) {
    // Bucket doesn't exist, create it
    console.log(`üì¶ Creating bucket: gs://${bucketName}\n`);
    exec(
      `gcloud storage buckets create gs://${bucketName} ` +
      `--location=${region} ` +
      `--no-public-access-prevention`
    );
    console.log(`‚úÖ Bucket created: gs://${bucketName}\n`);
  }
};

/**
 * Upload files to Cloud Storage
 */
const uploadFiles = (
  baseDir: string,
  bucketName: string,
  cacheControl: string,
  dryRun: boolean
): UploadStats => {
  console.log('üì§ Uploading split CSV files to Cloud Storage...\n');

  const stats: UploadStats = {
    zhviFiles: 0,
    zoriFiles: 0,
    totalSize: 0,
    duration: 0,
    errors: []
  };

  const startTime = Date.now();

  if (dryRun) {
    const zhviFiles = fs.readdirSync(path.join(baseDir, 'zhvi')).filter(f => f.endsWith('.csv'));
    const zoriFiles = fs.readdirSync(path.join(baseDir, 'zori')).filter(f => f.endsWith('.csv'));

    console.log('[DRY RUN] Would upload:');
    console.log(`   ZHVI: ${zhviFiles.length} files from ${baseDir}/zhvi/ to gs://${bucketName}/zhvi/`);
    console.log(`   ZORI: ${zoriFiles.length} files from ${baseDir}/zori/ to gs://${bucketName}/zori/`);
    console.log(`   Cache-Control: ${cacheControl}\n`);

    stats.zhviFiles = zhviFiles.length;
    stats.zoriFiles = zoriFiles.length;
    return stats;
  }

  try {
    // Upload ZHVI files
    console.log('üìä Uploading ZHVI files...');
    exec(
      `gcloud storage cp -r "${baseDir}/zhvi/*" gs://${bucketName}/zhvi/ ` +
      `--cache-control="${cacheControl}"`
    );

    const zhviFiles = fs.readdirSync(path.join(baseDir, 'zhvi')).filter(f => f.endsWith('.csv'));
    stats.zhviFiles = zhviFiles.length;
    console.log(`‚úÖ Uploaded ${stats.zhviFiles} ZHVI files\n`);

    // Upload ZORI files
    console.log('üìä Uploading ZORI files...');
    exec(
      `gcloud storage cp -r "${baseDir}/zori/*" gs://${bucketName}/zori/ ` +
      `--cache-control="${cacheControl}"`
    );

    const zoriFiles = fs.readdirSync(path.join(baseDir, 'zori')).filter(f => f.endsWith('.csv'));
    stats.zoriFiles = zoriFiles.length;
    console.log(`‚úÖ Uploaded ${stats.zoriFiles} ZORI files\n`);
  } catch (error) {
    const err = error as Error;
    stats.errors.push(err.message);
    throw error;
  }

  stats.duration = (Date.now() - startTime) / 1000;
  return stats;
};

/**
 * Make bucket publicly readable
 */
const makePublic = (bucketName: string, dryRun: boolean): void => {
  console.log('üåç Making bucket publicly readable...\n');

  if (dryRun) {
    console.log(`[DRY RUN] Would make gs://${bucketName} publicly readable\n`);
    return;
  }

  try {
    // First, ensure public access prevention is disabled
    console.log('Disabling public access prevention...');
    exec(
      `gcloud storage buckets update gs://${bucketName} ` +
      `--no-public-access-prevention`,
      true
    );

    // Then add public IAM binding
    exec(
      `gcloud storage buckets add-iam-policy-binding gs://${bucketName} ` +
      `--member=allUsers ` +
      `--role=roles/storage.objectViewer`
    );
    console.log(`‚úÖ Bucket is now publicly readable\n`);
  } catch (error) {
    console.warn('‚ö†Ô∏è  Failed to make bucket public. You may need to do this manually.\n');
  }
};

/**
 * Set up CDN (optional)
 */
const setupCdn = (bucketName: string, dryRun: boolean): void => {
  console.log('üöÄ Setting up CDN...\n');

  if (dryRun) {
    console.log(`[DRY RUN] Would create CDN backend for gs://${bucketName}\n`);
    return;
  }

  try {
    const backendName = `${bucketName}-backend`;

    // Check if backend already exists
    try {
      exec(`gcloud compute backend-buckets describe ${backendName}`, true);
      console.log(`‚úÖ CDN backend already exists: ${backendName}\n`);
      return;
    } catch {
      // Backend doesn't exist, create it
    }

    console.log(`Creating CDN backend: ${backendName}`);
    exec(
      `gcloud compute backend-buckets create ${backendName} ` +
      `--gcs-bucket-name=${bucketName} ` +
      `--enable-cdn`
    );
    console.log(`‚úÖ CDN backend created: ${backendName}\n`);
    console.log('üí° To complete CDN setup, create a load balancer. See CLOUD_STORAGE_SETUP.md\n');
  } catch (error) {
    console.warn('‚ö†Ô∏è  CDN setup failed. This is optional. See CLOUD_STORAGE_SETUP.md for manual setup.\n');
  }
};

/**
 * Print summary
 */
const printSummary = (
  bucketName: string,
  stats: UploadStats,
  options: UploadOptions
): void => {
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('‚úÖ Upload Complete!');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`Bucket: gs://${bucketName}`);
  console.log(`ZHVI files: ${stats.zhviFiles}`);
  console.log(`ZORI files: ${stats.zoriFiles}`);
  console.log(`Total files: ${stats.zhviFiles + stats.zoriFiles}`);
  console.log(`Duration: ${stats.duration.toFixed(2)} seconds`);

  if (stats.errors.length > 0) {
    console.log(`‚ö†Ô∏è  Errors: ${stats.errors.length}`);
  }

  console.log('\nüìù Next Steps:');
  console.log('   1. Update environment variables:');
  console.log('      VITE_USE_SPLIT_CSV=true');
  console.log(`      VITE_MARKET_DATA_URL=https://storage.googleapis.com/${bucketName}`);
  console.log('   2. Deploy to Cloud Run:');
  console.log('      git push origin prod');
  console.log('   3. Test the deployment');

  if (options.enableCdn) {
    console.log('\nüí° CDN Tips:');
    console.log('   - Set up load balancer for custom domain');
    console.log('   - See CLOUD_STORAGE_SETUP.md for details');
  }

  console.log('\nüîó Access URLs:');
  console.log(`   https://storage.googleapis.com/${bucketName}/zhvi/new-york-ny.csv`);
  console.log(`   https://storage.googleapis.com/${bucketName}/zori/new-york-ny.csv`);
};

/**
 * Main function
 */
const main = async (): Promise<void> => {
  console.log('üöÄ Upload Split CSV Files to Cloud Storage');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

  // Parse command line arguments
  const argOptions = parseArgs();

  // Default options
  const options: UploadOptions = {
    bucketName: argOptions.bucketName || 'housing-data-markets',
    dryRun: argOptions.dryRun || false,
    skipBucketCreation: argOptions.skipBucketCreation || false,
    enableCdn: argOptions.enableCdn !== false,
    cacheControl: argOptions.cacheControl || 'public, max-age=31536000',
    makePublic: argOptions.makePublic !== false,
    region: argOptions.region || 'us-central1'
  };

  console.log('üìã Configuration:');
  console.log(`   Bucket: gs://${options.bucketName}`);
  console.log(`   Region: ${options.region}`);
  console.log(`   Cache-Control: ${options.cacheControl}`);
  console.log(`   Public: ${options.makePublic}`);
  console.log(`   CDN: ${options.enableCdn}`);
  console.log(`   Dry Run: ${options.dryRun}\n`);

  // Check prerequisites
  checkGcloudSetup();

  // Check split files exist
  const baseDir = path.join(__dirname, '../housing-data-app/public/data/markets');
  checkSplitFiles(baseDir);

  // Create bucket if needed
  if (!options.skipBucketCreation) {
    createBucket(options.bucketName, options.region, options.dryRun);
  }

  // Upload files
  const stats = uploadFiles(baseDir, options.bucketName, options.cacheControl, options.dryRun);

  if (options.dryRun) {
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('‚úÖ Dry Run Complete!');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('No files were uploaded. Remove --dry-run to proceed.\n');
    return;
  }

  // Make bucket public
  if (options.makePublic) {
    makePublic(options.bucketName, options.dryRun);
  }

  // Set up CDN (optional)
  if (options.enableCdn) {
    setupCdn(options.bucketName, options.dryRun);
  }

  // Print summary
  printSummary(options.bucketName, stats, options);
};

// Run if executed directly
if (require.main === module) {
  main().catch(error => {
    console.error('\n‚ùå Upload failed:', error.message);
    process.exit(1);
  });
}

export { main as uploadToCloudStorage };
